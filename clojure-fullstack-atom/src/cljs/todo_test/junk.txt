user=> (str {:a ": a bc d"})
"{:a \": a bc d\"}"
user=> (clojure.edn/read-string *1)
{:a ": a bc d"}
user=> (def a (atom 0))
#'user/a
user=> (swap! a inc)
1
user=> @a
1
user=> (swap! a inc)
2
user=> (assoc a 1 2)

ClassCastException clojure.lang.Atom cannot be cast to clojure.lang.Associative  clojure.lang.RT.assoc (RT.java:792)
user=> (let [a 1] a)
1
user=> (let [a 1, b (+ a a), c (* b b)] [a b c])
[1 2 4]
user=> (let [a 1, b (+ a a), c (* b b)] 1 3 4 5 [a b c])
[1 2 4]
user=> {:a 1}
{:a 1}
user=> (:a {:a 1})
1
user=> {:list "{:text \"a\"}}
  #_=>

user=>

user=>

user=> {:list "{:text \"a\"}"}
{:list "{:text \"a\"}"}
user=> (def counter-atom (atom 0))
#'user/counter-atom
user=> (def todolist-atom (atom {}))
#'user/todolist-atom
user=> (defn list-update
  #_=>   [params]
  #_=>   (let [id (swap! counter-atom inc)
  #_=>         new-list-str (:list params)
  #_=>         new-list (clojure.edn/read-string new-list-str)]
  #_=>     (swap! todolist-atom
  #_=>       (fn [todolist]
  #_=>         (assoc todolist id (assoc new-list :id id))))
  #_=> )
  #_=>

user=> (defn list-update
  #_=>   [params]
  #_=>   (let [id (swap! counter-atom inc)
  #_=>         new-list-str (:list params)
  #_=>         new-list (clojure.edn/read-string new-list-str)]
  #_=>     (swap! todolist-atom
  #_=>       (fn [todolist]
  #_=>         (assoc todolist id (assoc new-list :id id))))))
#'user/list-update
user=> (def sample-params {:list "{:text \"a\"}"})
#'user/sample-params
user=> (list-update sample-params)
{1 {:text "a", :id 1}}
user=> @todolist-atom
{1 {:text "a", :id 1}}
user=> (def a {0 1})
#'user/a
user=> (update a 0 inc)
{0 2}
user=> (assoc a 0 (inc (get a 0)))
{0 2}
user=> (dissoc a 0)
{}
user=> (def b (atom 0))
#'user/b
user=> (reset! b 1)
1
user=> (list-update sample-params)
{1 {:text "a", :id 1}, 2 {:text "a", :id 2}}
user=> (vals {:a 1 :b 2})
(1 2)
user=> (def a [{:keys [butt]}] butt)

CompilerException java.lang.RuntimeException: Too many arguments to def, compiling:(/private/var/folders/g9/1knz3r493fd8ykxqlkfhy_b80000gn/T/form-init4987829102176169049.clj:1:1)
user=> (defn a [{:keys [butt]}] butt)
#'user/a
user=> (a {})
nil
user=> (a {:butt "cute"})
"cute"
user=>


BATTLE PLAN:
- fix up mount-root
- add sample data to backend
- finish react component/input and button
- add-todo
